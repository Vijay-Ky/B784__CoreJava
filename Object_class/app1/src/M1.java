class A
{
	String name;
	int rollno;
	
	A(String name, int rollno)
	{
		this.name = name;
		this.rollno = rollno;
	} 
	public String toString()
	{
		return "name: " + this.name + " rollno: " + this.rollno;
	}
}
class M1
{
	public static void main(String[] args) 
	{
		A a1 = new A("vijay", 101);
		A a2 = new A("sunny", 102);
		System.out.println(a1);
		System.out.println(a2);
	}
}
/*
1. toString() we can use this method to get the string representation of an object
2. whenever we call object reference internally calling the toString method
3. toString method returns class name @ hascode in the form of hexadecimal
4. in all the wrapper classes,collection classes and in String class, String Buffer and String Builder classes 
   toString method got overrided to return the object's content.
5. for every object a unique code will be generated by the JVM it is called hashCode
6. hashcode doent represent address of object
   JVM will use hashcode while saving objects into hashing related datastructures like hashtable,
   hashMap, hashSet etc.
7.The main advantage of saving objects based on hashcode is search operation will become easy
(the most powerful algorith is hashing).
8.If we allow to execute hashCode method of object class then it will generate hashCode based on
address of the object.it doesnt mean that hashcode represents address of the object.
9. we can override hashcode to generate our own hashcode.
10.it is only proper when for every object if we generate a unique number as hashcode.
11. equals method used to check equality of two object
12. if our class doenst contain equals method then object class equals method will be executed.
13. by default object class equals method compares the object reference not the content.
14. String class equals method overrided to compare the content not the reference.
*/
 